/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BusFactoryInterface extends ethers.utils.Interface {
  functions: {
    "busList(uint256)": FunctionFragment;
    "calcualteAddressAsm(address,string)": FunctionFragment;
    "calcualteSaltAddress(address,string,bytes32)": FunctionFragment;
    "calcualteSaltAddressAsm(address,string,bytes32)": FunctionFragment;
    "create2AndSendEther(address,string,bytes32)": FunctionFragment;
    "createAndSendEther(address,string)": FunctionFragment;
    "createBus(address,string)": FunctionFragment;
    "createBus2(address,string,bytes32)": FunctionFragment;
    "getBus(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "busList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calcualteAddressAsm",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calcualteSaltAddress",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcualteSaltAddressAsm",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "create2AndSendEther",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createAndSendEther",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBus",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createBus2",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "busList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcualteAddressAsm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcualteSaltAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcualteSaltAddressAsm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create2AndSendEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAndSendEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBus2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBus", data: BytesLike): Result;

  events: {
    "Log(string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Log"): EventFragment;
}

export type LogEvent = TypedEvent<
  [string, string] & { arg0: string; arg1: string }
>;

export class BusFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BusFactoryInterface;

  functions: {
    busList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    calcualteAddressAsm(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcualteSaltAddress(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calcualteSaltAddressAsm(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create2AndSendEther(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createAndSendEther(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBus(
      _owner: string,
      _model: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createBus2(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBus(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        model: string;
        bus_addr: string;
        balance: BigNumber;
      }
    >;
  };

  busList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  calcualteAddressAsm(
    _owner: string,
    _model: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcualteSaltAddress(
    _owner: string,
    _model: string,
    _salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calcualteSaltAddressAsm(
    _owner: string,
    _model: string,
    _salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create2AndSendEther(
    _owner: string,
    _model: string,
    _salt: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createAndSendEther(
    _owner: string,
    _model: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBus(
    _owner: string,
    _model: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createBus2(
    _owner: string,
    _model: string,
    _salt: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBus(
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      owner: string;
      model: string;
      bus_addr: string;
      balance: BigNumber;
    }
  >;

  callStatic: {
    busList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    calcualteAddressAsm(
      _owner: string,
      _model: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calcualteSaltAddress(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    calcualteSaltAddressAsm(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    create2AndSendEther(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createAndSendEther(
      _owner: string,
      _model: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBus(
      _owner: string,
      _model: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createBus2(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getBus(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        owner: string;
        model: string;
        bus_addr: string;
        balance: BigNumber;
      }
    >;
  };

  filters: {
    "Log(string,address)"(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, string], { arg0: string; arg1: string }>;

    Log(
      undefined?: null,
      undefined?: null
    ): TypedEventFilter<[string, string], { arg0: string; arg1: string }>;
  };

  estimateGas: {
    busList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    calcualteAddressAsm(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcualteSaltAddress(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calcualteSaltAddressAsm(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create2AndSendEther(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createAndSendEther(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBus(
      _owner: string,
      _model: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createBus2(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBus(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    busList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcualteAddressAsm(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcualteSaltAddress(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calcualteSaltAddressAsm(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create2AndSendEther(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createAndSendEther(
      _owner: string,
      _model: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBus(
      _owner: string,
      _model: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createBus2(
      _owner: string,
      _model: string,
      _salt: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBus(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
