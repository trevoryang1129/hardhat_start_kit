/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Ballot, BallotInterface } from "../Ballot";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
      {
        internalType: "address",
        name: "_chairperson",
        type: "address",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "chairperson",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "VoterJoin",
    type: "event",
  },
  {
    inputs: [],
    name: "chairperson",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "delegate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposal",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "voteCount",
            type: "uint256",
          },
        ],
        internalType: "struct Ballot.Proposal[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotersList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "voter",
        type: "address",
      },
    ],
    name: "giveRightToVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "title",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "uint256",
        name: "weight",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "voted",
        type: "bool",
      },
      {
        internalType: "address",
        name: "delegate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "vote",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "votersList",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "bytes32",
        name: "winnerName_",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "winningProposal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001e4c38038062001e4c833981810160405281019062000037919062000433565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600190805190602001906200008f92919062000241565b506001600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005b8351811015620002375760046040518060400160405280868481518110620001d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001600081525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806200022e9062000605565b9150506200017f565b5050505062000714565b8280546200024f90620005cf565b90600052602060002090601f016020900481019282620002735760008555620002bf565b82601f106200028e57805160ff1916838001178555620002bf565b82800160010185558215620002bf579182015b82811115620002be578251825591602001919060010190620002a1565b5b509050620002ce9190620002d2565b5090565b5b80821115620002ed576000816000905550600101620002d3565b5090565b6000620003086200030284620004ef565b620004bb565b905080838252602082019050828560208602820111156200032857600080fd5b60005b858110156200035c5781620003418882620003ef565b8452602084019350602083019250506001810190506200032b565b5050509392505050565b60006200037d62000377846200051e565b620004bb565b9050828152602081018484840111156200039657600080fd5b620003a384828562000599565b509392505050565b600081519050620003bc81620006e0565b92915050565b600082601f830112620003d457600080fd5b8151620003e6848260208601620002f1565b91505092915050565b6000815190506200040081620006fa565b92915050565b600082601f8301126200041857600080fd5b81516200042a84826020860162000366565b91505092915050565b6000806000606084860312156200044957600080fd5b600084015167ffffffffffffffff8111156200046457600080fd5b6200047286828701620003c2565b93505060206200048586828701620003ab565b925050604084015167ffffffffffffffff811115620004a357600080fd5b620004b18682870162000406565b9150509250925092565b6000604051905081810181811067ffffffffffffffff82111715620004e557620004e4620006b1565b5b8060405250919050565b600067ffffffffffffffff8211156200050d576200050c620006b1565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156200053c576200053b620006b1565b5b601f19601f8301169050602081019050919050565b60006200055e826200056f565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005b95780820151818401526020810190506200059c565b83811115620005c9576000848401525b50505050565b60006002820490506001821680620005e857607f821691505b60208210811415620005ff57620005fe62000682565b5b50919050565b600062000612826200058f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000648576200064762000653565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620006eb8162000551565b8114620006f757600080fd5b50565b620007058162000565565b81146200071157600080fd5b50565b61172880620007246000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806372ce73ab1161008c578063a3ec138d11610066578063a3ec138d14610201578063b9e2bea014610234578063bc86f38514610252578063e2ba53f014610270576100cf565b806372ce73ab146101975780638263a938146101c75780639e7b8d61146101e5576100cf565b80630121b93f146100d4578063013cf08b146100f05780632e4176cf146101215780634a79d50c1461013f5780635c19a95c1461015d578063609ff1bd14610179575b600080fd5b6100ee60048036038101906100e99190610ea0565b61028e565b005b61010a60048036038101906101059190610ea0565b610432565b6040516101189291906112e6565b60405180910390f35b610129610466565b604051610136919061126c565b60405180910390f35b61014761048a565b604051610154919061130f565b60405180910390f35b61017760048036038101906101729190610e77565b610518565b005b6101816108ec565b60405161018e9190611411565b60405180910390f35b6101b160048036038101906101ac9190610ea0565b6109c0565b6040516101be919061126c565b60405180910390f35b6101cf6109ff565b6040516101dc9190611411565b60405180910390f35b6101ff60048036038101906101fa9190610e77565b610a0c565b005b61021b60048036038101906102169190610e77565b610c95565b60405161022b949392919061142c565b60405180910390f35b61023c610cf2565b60405161024991906112a9565b60405180910390f35b61025a610d65565b6040516102679190611287565b60405180910390f35b610278610df3565b60405161028591906112cb565b60405180910390f35b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541415610319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031090611331565b60405180910390fd5b8060010160009054906101000a900460ff161561036b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036290611351565b60405180910390fd5b60018160010160006101000a81548160ff0219169083151502179055508181600201819055508060000154600483815481106103d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546103f091906114ff565b925050819055507f16a9aa39af49f169911e977347975198c503525f7240d6892a626f0227642fce33604051610426919061126c565b60405180910390a15050565b6004818154811061044257600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054610497906115da565b80601f01602080910402602001604051908101604052809291908181526020018280546104c3906115da565b80156105105780601f106104e557610100808354040283529160200191610510565b820191906000526020600020905b8154815290600101906020018083116104f357829003601f168201915b505050505081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060010160009054906101000a900460ff16156105ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a490611371565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561061c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610613906113f1565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff16600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461078c57600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610787576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077e906113b1565b60405180910390fd5b61061d565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506001816000015410156107e157600080fd5b60018260010160006101000a81548160ff021916908315150217905550828260010160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060010160009054906101000a900460ff16156108c7578160000154600482600201548154811061089b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160010160008282546108bb91906114ff565b925050819055506108e7565b81600001548160000160008282546108df91906114ff565b925050819055505b505050565b6000806000905060005b6004805490508110156109bb57816004828154811061093e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015411156109a85760048181548110610990577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016001015491508092505b80806109b39061160c565b9150506108f6565b505090565b600381815481106109d057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600480549050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9190611391565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1615610b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b21906113d1565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414610b7957600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fdf563c4eb38a16d32f91dd7361c5817a51f165e625dbbb051237fa19c348395c82604051610c8a919061126c565b60405180910390a250565b60026020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020154905084565b60606004805480602002602001604051908101604052809291908181526020016000905b82821015610d5c57838290600052602060002090600202016040518060400160405290816000820154815260200160018201548152505081526020019060010190610d16565b50505050905090565b60606003805480602002602001604051908101604052809291908181526020018280548015610de957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d9f575b5050505050905090565b60006004610dff6108ec565b81548110610e36577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000154905090565b600081359050610e5c816116c4565b92915050565b600081359050610e71816116db565b92915050565b600060208284031215610e8957600080fd5b6000610e9784828501610e4d565b91505092915050565b600060208284031215610eb257600080fd5b6000610ec084828501610e62565b91505092915050565b6000610ed58383610ef9565b60208301905092915050565b6000610eed838361121f565b60408301905092915050565b610f0281611555565b82525050565b610f1181611555565b82525050565b6000610f2282611491565b610f2c81856114cc565b9350610f3783611471565b8060005b83811015610f68578151610f4f8882610ec9565b9750610f5a836114b2565b925050600181019050610f3b565b5085935050505092915050565b6000610f808261149c565b610f8a81856114dd565b9350610f9583611481565b8060005b83811015610fc6578151610fad8882610ee1565b9750610fb8836114bf565b925050600181019050610f99565b5085935050505092915050565b610fdc81611567565b82525050565b610feb81611573565b82525050565b610ffa81611573565b82525050565b600061100b826114a7565b61101581856114ee565b93506110258185602086016115a7565b61102e816116b3565b840191505092915050565b60006110466014836114ee565b91507f486173206e6f20726967687420746f20766f74650000000000000000000000006000830152602082019050919050565b6000611086600e836114ee565b91507f416c726561647920766f7465642e0000000000000000000000000000000000006000830152602082019050919050565b60006110c66012836114ee565b91507f596f7520616c726561647920766f7465642e00000000000000000000000000006000830152602082019050919050565b60006111066028836114ee565b91507f4f6e6c79206368616972706572736f6e2063616e20676976652072696768742060008301527f746f20766f74652e0000000000000000000000000000000000000000000000006020830152604082019050919050565b600061116c6019836114ee565b91507f466f756e64206c6f6f7020696e2064656c65676174696f6e2e000000000000006000830152602082019050919050565b60006111ac6018836114ee565b91507f54686520766f74657220616c726561647920766f7465642e00000000000000006000830152602082019050919050565b60006111ec601e836114ee565b91507f53656c662d64656c65676174696f6e20697320646973616c6c6f7765642e00006000830152602082019050919050565b6040820160008201516112356000850182610fe2565b506020820151611248602085018261124e565b50505050565b6112578161159d565b82525050565b6112668161159d565b82525050565b60006020820190506112816000830184610f08565b92915050565b600060208201905081810360008301526112a18184610f17565b905092915050565b600060208201905081810360008301526112c38184610f75565b905092915050565b60006020820190506112e06000830184610ff1565b92915050565b60006040820190506112fb6000830185610ff1565b611308602083018461125d565b9392505050565b600060208201905081810360008301526113298184611000565b905092915050565b6000602082019050818103600083015261134a81611039565b9050919050565b6000602082019050818103600083015261136a81611079565b9050919050565b6000602082019050818103600083015261138a816110b9565b9050919050565b600060208201905081810360008301526113aa816110f9565b9050919050565b600060208201905081810360008301526113ca8161115f565b9050919050565b600060208201905081810360008301526113ea8161119f565b9050919050565b6000602082019050818103600083015261140a816111df565b9050919050565b6000602082019050611426600083018461125d565b92915050565b6000608082019050611441600083018761125d565b61144e6020830186610fd3565b61145b6040830185610f08565b611468606083018461125d565b95945050505050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600061150a8261159d565b91506115158361159d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561154a57611549611655565b5b828201905092915050565b60006115608261157d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156115c55780820151818401526020810190506115aa565b838111156115d4576000848401525b50505050565b600060028204905060018216806115f257607f821691505b6020821081141561160657611605611684565b5b50919050565b60006116178261159d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561164a57611649611655565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6116cd81611555565b81146116d857600080fd5b50565b6116e48161159d565b81146116ef57600080fd5b5056fea26469706673582212202cfccd716c57521cfeea2094c026234ee9baca6f89da7b689aab57a129a5c50364736f6c63430008000033";

export class Ballot__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    proposalNames: BytesLike[],
    _chairperson: string,
    _title: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Ballot> {
    return super.deploy(
      proposalNames,
      _chairperson,
      _title,
      overrides || {}
    ) as Promise<Ballot>;
  }
  getDeployTransaction(
    proposalNames: BytesLike[],
    _chairperson: string,
    _title: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      proposalNames,
      _chairperson,
      _title,
      overrides || {}
    );
  }
  attach(address: string): Ballot {
    return super.attach(address) as Ballot;
  }
  connect(signer: Signer): Ballot__factory {
    return super.connect(signer) as Ballot__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BallotInterface {
    return new utils.Interface(_abi) as BallotInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Ballot {
    return new Contract(address, _abi, signerOrProvider) as Ballot;
  }
}
